-- Data Exploration Summary --

-- 1: Inspect Row Count --
SELECT
  COUNT(*) AS row_count
FROM health.user_logs; 

-- 2: Check For Duplicate Records --
SELECT
  id,
  log_date,
  measure,
  measure_value,
  systolic,
  diastolic,
  COUNT(*) AS frequency
FROM health.user_logs 
GROUP BY
  id,
  log_date,
  measure,
  measure_value,
  systolic,
  diastolic
ORDER BY frequency DESC;

-- 3: Single Column Frequency Count --
SELECT
  measure, 
  COUNT(*) AS frequency, 
  ROUND(
    100 * COUNT(*) / SUM(COUNT(*)) OVER (), 
    2
  ) AS percentage
FROM health.user_logs
GROUP BY measure
ORDER BY frequency DESC; 

-- 4: Summary Statistics --
SELECT
  'weight' AS measure,
  ROUND(MIN(measure_value), 2) AS minimum_value,
  ROUND(MAX(measure_value), 2) AS maximum_value,
  ROUND(AVG(measure_value), 2) AS average_value,
  ROUND(
    CAST(PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY measure_value) AS numeric),
    2
  ) AS median_value,
  ROUND(
    MODE() WITHIN GROUP (ORDER BY measure_value), 
    2
  ) AS mode_value,
  ROUND(STDDEV(measure_value), 2) AS stddev_value,
  ROUND(VARIANCE(measure_value), 2) AS variance_value
FROM health.user_logs
WHERE measure = 'weight'; 

-- 5: Check Cumulative Distributions -- 
WITH percentile_values AS(
  SELECT
    measure_value, 
    NTILE(100) OVER (
      ORDER BY
        measure_value
    ) AS percentile
  FROM health.user_logs
  WHERE measure = 'weight'
)
SELECT
  percentile,
  MIN(measure_value) AS floor_value, 
  MAX(measure_value) AS ceiling_value,
  COUNT(*) AS percentile_count
FROM percentile_values
GROUP BY percentile
ORDER BY percentile;

-- 6.1: Large Outlier Checking --
WITH percentile_values AS (
  SELECT
    measure_value, 
    NTILE(100) OVER(
      ORDER BY
        measure_value
    ) AS percentile
  FROM health.user_logs
  WHERE measure = 'weight'
)
SELECT
  measure_value,
  ROW_NUMBER() OVER (ORDER BY measure_value DESC) AS row_number_order,
  RANK() OVER (ORDER BY measure_value DESC) AS rank_order,
  DENSE_RANK() OVER (ORDER BY measure_value DESC) AS dense_rank_order
FROM percentile_values
WHERE percentile = 100
ORDER BY measure_value DESC;

-- 6.2: Small Outlier Checking --
WITH percentile_values AS (
  SELECT
    measure_value, 
    NTILE(100) OVER(
      ORDER BY
        measure_value
    ) AS percentile
  FROM health.user_logs
  WHERE measure = 'weight'
)
SELECT
  measure_value,
  ROW_NUMBER() OVER (ORDER BY measure_value) AS row_number_order,
  RANK() OVER (ORDER BY measure_value) AS rank_order,
  DENSE_RANK() OVER (ORDER BY measure_value) AS dense_rank_order
FROM percentile_values
WHERE percentile = 1
ORDER BY measure_value;

-- 7: Remove Outliers & Create Temp Table --
DROP TABLE IF EXISTS clean_weight_logs;
CREATE TEMP TABLE clean_weight_logs AS (
  SELECT
  *
  FROM health.user_logs
  WHERE measure = 'weight' 
    AND measure_value > 0
    AND measure_value < 201
); 

-- 8: Frequency Distribution -- 
SELECT 
  WIDTH_BUCKET(measure_value, 0, 200, 50) AS bucket,
  AVG(measure_value) AS measure_value, 
  COUNT(*) AS frequency
FROM health.user_logs
WHERE measure = 'weight'
GROUP BY bucket
ORDER BY bucket; 

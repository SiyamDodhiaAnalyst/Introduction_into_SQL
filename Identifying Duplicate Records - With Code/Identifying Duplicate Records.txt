-- Visualise raw data --  
SELECT
  * 
FROM health.user_logs; 

-- Find the number of rows in the data --
SELECT
  COUNT(*)
FROM health.user_logs;

-- Number of unique user ids -- 
SELECT 
  COUNT(DISTINCT id)
FROM health.user_logs;

-- Number of unique values in Measure column with a percentage --
SELECT
  measure, 
  COUNT(*) AS frequency, 
  ROUND(
    100 * COUNT(*)/SUM(COUNT(*)) OVER (),
    2
  ) AS percentage
FROM health.user_logs
GROUP BY measure
ORDER BY frequency DESC;  

-- Number of unique values in Id column with a percentage --
SELECT
  id,
  COUNT(*) AS frequency,
  ROUND(
    100 * COUNT(*)/SUM(COUNT(*)) OVER (), 
    2
  ) AS percentage
FROM health.user_logs
GROUP BY id
ORDER BY frequency DESC
LIMIT 10;

-- Frequenct of measure_value column --
SELECT
  measure_value, 
  COUNT(*) AS frequency
FROM health.user_logs
GROUP BY measure_value
ORDER BY frequency DESC;

-- Frequenct of systolic values -- 
SELECT
  systolic, 
  COUNT(*) AS frequency
FROM health.user_logs
GROUP BY systolic
ORDER BY frequency DESC;

-- Frequenct of diastolic values -- 
SELECT
  diastolic, 
  COUNT(*) AS frequency
FROM health.user_logs
GROUP BY diastolic
ORDER BY frequency DESC;

-- Deeper look into null and 0 values --
SELECT 
  measure, 
  COUNT(*)
FROM health.user_logs
WHERE measure_value = 0
GROUP BY measure; 
-- Large amount when measure = 'blood_pressure'

-- Inspect values where the measure value = 0 and measure = 'blood_pressure' --
SELECT 
  *
FROM health.user_logs
WHERE measure_value = 0
AND measure = 'blood_pressure'
LIMIT 10;

-- Inspect values where the measure value != 0 and measure = 'blood_pressure' --
SELECT 
  *
FROM health.user_logs
WHERE measure_value != 0
AND measure = 'blood_pressure'
LIMIT 10;

-- Frequency of null values in systolic column --
SELECT
  measure, 
  COUNT(*)
FROM health.user_logs
WHERE systolic IS NULL 
GROUP BY measure; 
  -- hence, there are no null values when measure = 'blood_pressure' --

-- Frequency of null values in diastolic column -- 
SELECT
  measure,
  COUNT(*)
FROM health.user_logs
WHERE diastolic IS NULL
GROUP BY 1;
  -- Again, diastolic only records non-null values for measure = 'blood_pressure'

-- From the health.user_logs data we can see that when measure = 'blood_pressure' there are only non-null values recorded with systolic = measure_value given measure_value != 0 -- 

-- Finding duplicate records in our data (gives us a count on the number of rows) --
SELECT COUNT(*)
FROM health.user_logs;

-- Finding all unique values in the data --
SELECT DISTINCT *
FROM health.user_logs;

-- Finding the number of unique values in the data -- 
SELECT COUNT(*)
FROM (
  SELECT DISTINCT *
  FROM health.user_logs
) AS subquery
; 

-- CTE example Query --
WITH deduped_logs AS (
  SELECT DISTINCT *
  FROM health.user_logs
)
SELECT COUNT(*)
FROM deduped_logs;

-- Create a temporary table --
-- Clearing out any tables with the same name -- 
DROP TABLE IF EXISTS deduplicated_user_logs; 

-- creating a remporary table --
CREATE TEMP TABLE deduplicated_user_logs AS 
SELECT DISTINCT *
FROM health.user_logs;

-- access new temp table --
SELECT
  * 
FROM deduplicated_user_logs;

-- Finding the number of unique values in the data -- 
SELECT COUNT(*)
FROM deduplicated_user_logs;

-- Hence, there are 43,891 records in the original table and 31,004 in the new unique temp table meaning that there are duplicates in the data -- 

-- Identifying duplicate records --
SELECT 
  id, 
  log_date,
  measure,
  measure_value,
  systolic,
  diastolic,
  COUNT(*) AS frequency
FROM health.user_logs
GROUP BY 
  id, 
  log_date,
  measure,
  measure_value,
  systolic,
  diastolic
ORDER BY frequency DESC;

-- Having clause for unique duplicates to trim down our output --
DROP TABLE IF EXISTS unique_duplicate_records;

CREATE TEMP TABLE unique_duplicate_records AS
SELECT 
  *
FROM health.user_logs
GROUP BY 
  id, 
  log_date,
  measure,
  measure_value,
  systolic,
  diastolic
HAVING COUNT(*) > 1; 

SELECT
  *
FROM unique_duplicate_records
LIMIT 10;

-- Retaining Duplicate Counts --
WITH groupby_counts AS (
  SELECT
    id, 
    log_date,
    measure,
    measure_value,
    systolic,
    diastolic,
    COUNT(*) AS frequency
  FROM health.user_logs
  GROUP BY 
    id, 
    log_date,
    measure,
    measure_value,
    systolic,
    diastolic
)
SELECT 
  * 
FROM groupby_counts
WHERE frequency > 1
ORDER BY frequency DESC; 

-- EXERCISES 6 --
-- 1 --
WITH groupby_counts AS (
  SELECT
    id, 
    log_date,
    measure,
    measure_value,
    systolic,
    diastolic,
    COUNT(*) AS frequency
  FROM health.user_logs
  GROUP BY 
    id, 
    log_date,
    measure,
    measure_value,
    systolic,
    diastolic
)
SELECT 
  id,
  SUM(frequency) AS total_duplicates
FROM groupby_counts
WHERE frequency > 1
GROUP BY id
ORDER BY total_duplicates DESC;

-- 2 -- 
WITH groupby_counts AS (
  SELECT
    id, 
    log_date,
    measure,
    measure_value,
    systolic,
    diastolic,
    COUNT(*) AS frequency
  FROM health.user_logs
  WHERE id != '054250c692e07a9fa9e62e345231df4b54ff435d'
  GROUP BY 
    id, 
    log_date,
    measure,
    measure_value,
    systolic,
    diastolic
)
SELECT 
  log_date,
  SUM(frequency) AS total_duplicates
FROM groupby_counts
WHERE frequency > 1
GROUP BY log_date
ORDER BY total_duplicates DESC;

-- 3 -- 
SELECT
  measure_value, 
  COUNT(*) AS frequency
FROM health.user_logs
WHERE measure = 'weight'
GROUP BY measure_value
ORDER BY frequency DESC; 

-- 4 --
WITH groupby_counts AS (
  SELECT
    id, 
    log_date,
    measure,
    measure_value,
    systolic,
    diastolic,
    COUNT(*) AS frequency
  FROM health.user_logs
  WHERE measure = 'blood_pressure'
  GROUP BY 
    id, 
    log_date,
    measure,
    measure_value,
    systolic,
    diastolic
)
SELECT 
  COUNT(*) AS single_duplicates,
  SUM(frequency) AS total_duplicates
FROM groupby_counts
WHERE frequency > 1;

-- 5 --
WITH all_measure_values AS (
  SELECT
    measure_value,
    COUNT(*) AS total_records,
    SUM(COUNT(*)) OVER () AS overall_total
  FROM health.user_logs
  WHERE measure = 'blood_pressure'
  GROUP BY measure_value
)
SELECT
  measure_value,
  total_records,
  overall_total,
  ROUND(100 * total_records::NUMERIC / overall_total, 2) AS percentage
FROM all_measure_values
WHERE measure_value = 0;

-- 6 --
WITH groupby_counts AS (
  SELECT
    id, 
    log_date,
    measure,
    measure_value,
    systolic,
    diastolic,
    COUNT(*) AS frequency
  FROM health.user_logs
  GROUP BY 
    id, 
    log_date,
    measure,
    measure_value,
    systolic,
    diastolic
)
SELECT  
  -- Subtract 1 to factor in the actual duplicates -- 
  ROUND(
    100 * SUM(CASE WHEN frequency > 1 THEN frequency - 1
      ELSE 0 END
    )::NUMERIC / SUM(frequency), 
    2
  ) AS duplicate_percentage
FROM groupby_counts;